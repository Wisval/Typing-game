import pygame
import random
import sys
import PIL
from PIL import Image



#######################################################


class penalty_line():
  def __init__(self, x, y, width, height):
    self.x = x
    self.y = y
    self.width = width
    self.height = height

    self.rect = pygame.Rect(self.x, self.y, self.width, self.height)


class player():
  def __init__(self, score, lives):
    self.score = score
    self.lives = lives

p1 = player(0, 3)


class Timer():
  def __init__(self, x, y, width, height):
    self.x = x
    self.y = y
    self.width = width
    self.height = height


class Collectables(pygame.sprite.Sprite):

 width = 50
 height = 50
 def __init__(self, x, y):
  super().__init__()
  self.surf = pygame.Surface([self.width, self.height])
  self.image = self.surf
  self.rect = self.surf.get_rect()
  #self.letter = letter
  self.x = x
  self.y = y
  self.rect.x = x
  self.rect.y = y
  self.image.fill((0, 0, 0))


class Text(pygame.sprite.Sprite):
  def __init__(self, text, size, color, width, height):
      super().__init__() 
      self.text = text
      self.size = size
      self.color = color
      self.width = width
      self.height = height

      self.font = pygame.font.SysFont("Arial", size)
      self.textSurf = self.font.render(text, 1, color)
      self.image = pygame.Surface((width, height))
      W = self.textSurf.get_width()
      H = self.textSurf.get_height()
      self.image.blit(self.textSurf, [width/2 - W/2, height/2 - H/2])


class bubble(Collectables, Text):
  point_value = 1
  def __init__(self, x, y, text, size, color, width, height):
      super().__init__(x, y)
      self.initialize(x, y, text, size, color, width, height)

  def initialize(self, x, y, text, size, color, width, height):
      Collectables.__init__(self, x, y)
      Text.__init__(self, text, size, color, width, height)
      self.image.fill((255, 255, 255))
  
#note to self this could be easier as the class text 
#isn't needed if images were usable, indicating the #current identity of the sprite 
#through an image rather than text as the bubble class #has to inherit from two classes
#as the bubble object could instead have a randomized #given identity from the letter, 
#and depending on the chosen letter, the corresponding 
#image would appear on the sprite 
#on the screen



Letters = ["A", "B", "C", "D", "E", "F", "G", "H", "I",
 "J", "K", "L", "M", "N", "O", "P", "Q", "R",
 "S", "T", "U", "V", "W", "X", "Y", "Z"]

x_coordinate = [
    157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172,
    173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
    189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204,
    205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
    221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236,
    237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
    253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
    269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284,
    285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297
]







# idea of the bubble swaying animation through the 
# incremantal increase/deacrease of the 
# x coordinate, by making it so that if the bubble's 
# original spawn x coordinate has 
# been increased by 50, the bubble's x coordinate 
# increase slows down exponentially until
# at a certain point the increase becomes 0 and the 
# bubble's x coordinate is instead 
# substracted exponentially for the bubble to go the 
# opposite way, producing a smoother 
# swinging animation.

#y = a*sin(k*x - b*t)

# as opposed to that of a zigzag, where if the 
# condition was that if the bubble's 
# original x coordinate has been increased by 50, the 
# bubble's x coordinate is instantly 
# subtracted as to go the opposite way.

#######################################################


pygame.init()

# Define the background colour 

background_colour  = (135, 190, 255) 

# Define the dimensions of 
# screen object(width,height) 
screen = pygame.display.set_mode((455, 400)) 

# Set the caption of the screen 
pygame.display.set_caption('Typing_G') 

# Fill the background colour to the screen 
screen.fill(background_colour) 

pygame.display.flip() 


def rise(): 
  n = 410
  while n > 0 :
    n -= 1
    pygame.time.delay(3)
  return n



Bubble = bubble(random.choice(x_coordinate), rise(), random.choice(Letters), 20, 
  (0, 0, 0), 50, 50)





all_sprites = pygame.sprite.Group()
all_sprites.add(Bubble)
for entity in all_sprites:
  screen.blit(entity.image,entity.rect)



  bg = pygame.image.load("Background.png")

  #INSIDE OF THE GAME LOOP
  screen.blit(bg, (455, 400))

  # Update the display using flip 
  pygame.display.flip() 

  # Variable to keep our game loop running 
  running = True

  # game loop 
  while running: 

      for event in pygame.event.get(): 
          if event.type == pygame.QUIT: 
              running = False

      # Update all sprites
      all_sprites.update()

      # Fill the background color
      screen.fill(background_colour)

      # Draw all sprites on the screen
      all_sprites.draw(screen)

      # Update the display
      pygame.display.flip()





#######################################################





          
#file:///C:/Users/ca822645/Downloads/%E2%80%94Pngtree%E2%80%94cartoon%20colorful%20coral%20under%20seabed_5691694.png



















